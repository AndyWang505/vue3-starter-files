---
title: 關注點分離
layout: ./source/_layout.ejs
current: separation_of_concerns
menu: es6
engine: ejs
---

<div class="component">
  <ul></ul>
  <input type="text" class="inputData">
  <button type="button" class="addBtn">增加內容</button>
</div>

<script>
// #1 資料、畫面、方法分離
// 畫面 = html
// 資料 = component.data
// 方法 = 物件內的其它函式
const component = {
  data: [ // 資料
    '這是第一句話',
    '這是第二句話',
    '這是第三句話'
  ],
  
  render() { // 渲染方法
    const list = document.querySelector('.component ul');
    let content = '';
    component.data.forEach((item, i) => {
      content = `${content}<li>${item} <button type="button" class="btn" data-id="${i}">移除</button></li>`
    });
    // 縮寫優化
    // const content = component.data.map(item => `<li>${item}</li>`).join('');
    list.innerHTML = content;

    // 加入監聽
    const btns = document.querySelectorAll('.btn');
    btns.forEach(btn => btn.addEventListener('click', (e)=> {
      // #2 重點，移除項目是先移除資料，而不是直接移除 DOM
      // 如果要進行 AJAX 或更複雜行為，不會因為 DOM 與資料混合而難以運作
      const id = e.target.dataset.id;
      this.data.splice(id, 1);
      this.render();
    }))
  },
  init() {
    this.render();

    const input = document.querySelector('.inputData');
    const addBtn = document.querySelector('.addBtn');
    addBtn.addEventListener('click', () => {
      const newText = input.value;
      input.value = '';
      this.data.push(newText);
      this.render();
    });

  }
}
component.init();



</script>