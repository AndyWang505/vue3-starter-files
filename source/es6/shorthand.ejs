---
title: ES6 縮寫
layout: ./source/_layout.ejs
current: shorthand
menu: es6
engine: ejs
description: 本課程的程式碼會盡可能利用 ES6 或其縮寫的形式撰寫，本章節會介紹實戰中的常見縮寫語法
---
<ul>
<li>1</li>
<li>2</li>
<li>3</li></ul>
<script>
// #1 語法糖與新增語法
// 語法糖：不會影響運作，邏輯與當前 JS 一致
const obj = {
  myName: '物件',
  fn: function() {
    return this.myName;
  }
}

console.log(obj.fn());

// 新增語法：會影響運作
var myName = '全域';
const obj2 = {
  myName: '物件',
  fn: () => {
    return this.myName;
  }
}

console.log(obj2.fn());


// =====
// #2 物件字面值 Object literals
// #2-1 物件內的函式
// const obj3 = {
//   myName: '物件',
//   fn: function() { // 請改為縮寫
//     return this.myName;
//   }
// }

// console.log(obj3.fn());

// #2-2 物件內的變數
// const person = {
//   name: '小明'
// };

// const people = {
//   person: person, // 請改為縮寫
// };

// console.log(people.person === person);



// #3 展開
// #3-1 不同陣列合併
const groupA = ['小明', '杰倫', '阿姨'];
const groupB = ['老媽', '老爸'];
const groupAll = groupA.concat(groupB);
// const groupAll = [...groupA, ...groupB];

// #3-2 物件擴展
const methods = {
  fn1() {
    console.log(1);
  },
  fn2() {
    console.log(1);
  },
}
const newMethods = {
  fn() {
    console.log(0)
  },
  ...methods
}
console.log(newMethods);

// #3-3 轉成純陣列
const doms = document.querySelectorAll('li');
console.log(doms); // 請轉為純陣列
// const spreadDom = [...doms];
// console.log(spreadDom);


// #4 預設值
// function sum(a, b) { // 請加入預設值避免錯誤
//   return a + b;
// }
// console.log(sum(1));


</script>